import telebot
from telebot import types
import sqlite3
import uuid
import logging

# –¢–∞–Ω–∑–∏–º–æ—Ç–∏ –±–æ—Ç
BOT_TOKEN = "8028992264:AAGvvR6jGwHCSmOw4XFuLLkYRJx_h9HxKBg"
ADMIN_ID = 5615452654  # ID-–∏ –∞–¥–º–∏–Ω

bot = telebot.TeleBot(BOT_TOKEN)

# –õ–æ–≥–≥–∏–Ω–≥
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –≠“∑–æ–¥–∏ –±–∞–∑–∞–∏ –¥–æ–¥–∞“≥–æ
def init_database():
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS movies (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            movie_id TEXT UNIQUE,
            file_id TEXT,
            title TEXT,
            description TEXT,
            link TEXT
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_subscriptions (
            user_id INTEGER,
            channel_id TEXT,
            subscribed BOOLEAN,
            PRIMARY KEY (user_id, channel_id)
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS channels (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            channel_id TEXT UNIQUE,
            channel_name TEXT,
            is_active BOOLEAN DEFAULT 1
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS broadcast_posts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            post_content TEXT,
            post_type TEXT,
            file_id TEXT,
            sent_count INTEGER DEFAULT 0,
            failed_count INTEGER DEFAULT 0,
            total_count INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()

# –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ “≥–∞–º–∞–∏ –∫–∞–Ω–∞–ª“≥–æ–∏ —Ñ–∞—ä–æ–ª
def get_active_channels():
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute('SELECT channel_id, channel_name FROM channels WHERE is_active = 1')
    channels = cursor.fetchall()
    conn.close()
    return channels

# –ò–ª–æ–≤–∞–∏ –∫–∞–Ω–∞–ª
def add_channel(channel_id, channel_name):
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR REPLACE INTO channels (channel_id, channel_name, is_active) VALUES (?, ?, 1)', 
                   (channel_id, channel_name))
    conn.commit()
    conn.close()

# –•–æ—Ä–∏“∑ –∫–∞—Ä–¥–∞–Ω–∏ –∫–∞–Ω–∞–ª
def remove_channel(channel_id):
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE channels SET is_active = 0 WHERE channel_id = ?', (channel_id,))
    conn.commit()
    conn.close()

# –°–∞–Ω“∑–∏—à–∏ –æ–±—É–Ω–∞
def check_subscription(user_id, channel_id):
    try:
        member = bot.get_chat_member(channel_id, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False

# –°–∞–Ω“∑–∏—à–∏ –æ–±—É–Ω–∞ –±–∞ “≥–∞–º–∞–∏ –∫–∞–Ω–∞–ª“≥–æ
def check_all_subscriptions(user_id):
    channels = get_active_channels()
    if not channels:
        return True  # –ê–≥–∞—Ä –∫–∞–Ω–∞–ª–µ –Ω–∞–±–æ—à–∞–¥, “≥–∞–º–∞—Ä–æ –∏“∑–æ–∑–∞—Ç –¥–æ–¥–∞
    
    for channel_id, channel_name in channels:
        if not check_subscription(user_id, channel_id):
            return False
    return True

# –ó–∞—Ö–∏—Ä–∞–∏ —Ñ–∏–ª–º –¥–∞—Ä –±–∞–∑–∞–∏ –¥–æ–¥–∞“≥–æ
def save_movie(movie_id, file_id, title, description=""):
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    
    # –°–æ—Ö—Ç–∞–Ω–∏ —Å–∏–ª–∫–∞–∏ –º–∞—Ö—Å—É—Å
    link = f"https://t.me/{bot.get_me().username}?start={movie_id}"
    
    cursor.execute('''
        INSERT OR REPLACE INTO movies (movie_id, file_id, title, description, link)
        VALUES (?, ?, ?, ?, ?)
    ''', (movie_id, file_id, title, description, link))
    
    conn.commit()
    conn.close()
    
    return link

# –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ñ–∏–ª–º –∞–∑ –±–∞–∑–∞–∏ –¥–æ–¥–∞“≥–æ
def get_movie(movie_id):
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM movies WHERE movie_id = ?', (movie_id,))
    movie = cursor.fetchone()
    
    conn.close()
    return movie

# –§—É–Ω–∫—Å–∏—è“≥–æ–∏ —Ä–∞—Å—Å—ã–ª–∫–∞
def save_broadcast_stats(post_content, post_type, file_id, sent_count, failed_count, total_count):
    """–ó–∞—Ö–∏—Ä–∞–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–∏ —Ä–∞—Å—Å—ã–ª–∫–∞"""
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO broadcast_posts (post_content, post_type, file_id, sent_count, failed_count, total_count)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (post_content, post_type, file_id, sent_count, failed_count, total_count))
    conn.commit()
    conn.close()

def send_broadcast_message(content, message_type, file_id=None):
    """–§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –ø–∞—ë–º–∏ —É–º—É–º”£ –±–∞ “≥–∞–º–∞ –∫–æ—Ä–±–∞—Ä–æ–Ω"""
    users = get_all_users()
    sent_count = 0
    failed_count = 0
    total_count = len(users)
    
    for user_id in users:
        if user_id == ADMIN_ID:  # –ë–∞ —Ö—É–¥–∏ –∞–¥–º–∏–Ω –Ω–∞—Ñ–∏—Ä–∏—Å—Ç–µ–º
            continue
            
        try:
            if message_type == 'text':
                bot.send_message(user_id, content, parse_mode='Markdown')
            elif message_type == 'photo':
                bot.send_photo(user_id, file_id, caption=content, parse_mode='Markdown')
            elif message_type == 'video':
                bot.send_video(user_id, file_id, caption=content, parse_mode='Markdown')
            elif message_type == 'document':
                bot.send_document(user_id, file_id, caption=content, parse_mode='Markdown')
            elif message_type == 'audio':
                bot.send_audio(user_id, file_id, caption=content, parse_mode='Markdown')
            elif message_type == 'voice':
                bot.send_voice(user_id, file_id, caption=content, parse_mode='Markdown')
            elif message_type == 'video_note':
                bot.send_video_note(user_id, file_id)
            elif message_type == 'sticker':
                bot.send_sticker(user_id, file_id)
                if content:  # –ê–≥–∞—Ä –º–∞—Ç–Ω “≥–∞–º –±–æ—à–∞–¥
                    bot.send_message(user_id, content, parse_mode='Markdown')
            
            sent_count += 1
            
        except Exception as e:
            failed_count += 1
            logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω –±–∞ {user_id}: {e}")
    
    # –ó–∞—Ö–∏—Ä–∞–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    save_broadcast_stats(content, message_type, file_id, sent_count, failed_count, total_count)
    
    return sent_count, failed_count, total_count
# “∂—É—Å—Ç—É“∑”Ø–∏ —Ñ–∏–ª–º –±–æ –Ω–æ–º
def search_movies_by_title(title):
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM movies WHERE title LIKE ? LIMIT 10', (f'%{title}%',))
    movies = cursor.fetchall()
    conn.close()
    return movies

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    
    # –ó–∞—Ö–∏—Ä–∞–∏ –∫–æ—Ä–±–∞—Ä –¥–∞—Ä –±–∞–∑–∞–∏ –¥–æ–¥–∞“≥–æ
    save_user(user_id)
    
    # –°–∞–Ω“∑–∏—à –æ—ë –∫–æ—Ä–±–∞—Ä –±–æ —Å–∏–ª–∫–∞–∏ –º–∞—Ö—Å—É—Å –æ–º–∞–¥–∞–∞—Å—Ç
    if len(message.text.split()) > 1:
        movie_id = message.text.split()[1]
        
        # –°–∞–Ω“∑–∏—à–∏ –æ–±—É–Ω–∞
        if check_all_subscriptions(user_id):
            # –ö–æ—Ä–±–∞—Ä –æ–±—É–Ω–∞ —à—É–¥–∞–∞—Å—Ç, —Ñ–∏–ª–º—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω
            movie = get_movie(movie_id)
            if movie:
                try:
                    bot.send_video(
                        message.chat.id, 
                        movie[2],  # file_id
                        caption=f"üé¨ {movie[3]}\n\n{movie[4]}",
                        reply_markup=get_main_keyboard(user_id)
                    )
                except:
                    bot.send_message(
                        message.chat.id,
                        "‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ñ–∏–ª–º. –õ—É—Ç—Ñ–∞–Ω –±–∞—ä–¥—Ç–∞—Ä –∫”Ø—à–∏—à –∫—É–Ω–µ–¥.",
                        reply_markup=get_main_keyboard(user_id)
                    )
            else:
                bot.send_message(
                    message.chat.id, 
                    "‚ùå –§–∏–ª–º —ë—Ñ—Ç –Ω–∞—à—É–¥.",
                    reply_markup=get_main_keyboard(user_id)
                )
        else:
            # –ö–æ—Ä–±–∞—Ä –æ–±—É–Ω–∞ –Ω–∞—à—É–¥–∞–∞—Å—Ç
            show_subscription_requirement(message, movie_id)
    else:
        # –°–∞–Ω“∑–∏—à–∏ –æ–±—É–Ω–∞ “≥–∞–Ω–≥–æ–º–∏ /start
        if not check_all_subscriptions(user_id) and user_id != ADMIN_ID:
            show_subscription_requirement(message)
        else:
            # –ü–∞—ë–º–∏ —Å–∞–ª–æ–º”£
            bot.send_message(
                message.chat.id,
                f"üëã –°–∞–ª–æ–º {message.from_user.first_name}!\n\n"
                "–ú–∞–Ω –±–æ—Ç–∏ –ø–∞“≥—à–∏ —Ñ–∏–ª–º “≥–∞—Å—Ç–∞–º. –ë–∞—Ä–æ–∏ —Ç–∞–º–æ—à–æ–∏ —Ñ–∏–ª–º“≥–æ –±–∞ –∫–∞–Ω–∞–ª“≥–æ–∏ –º–æ –æ–±—É–Ω–∞ —à–∞–≤–µ–¥!",
                reply_markup=get_main_keyboard(user_id)
            )

def show_subscription_requirement(message, movie_id=None):
    channels = get_active_channels()
    
    if not channels:
        # –ê–≥–∞—Ä –∫–∞–Ω–∞–ª–µ –Ω–∞–±–æ—à–∞–¥, —Ñ–∏–ª–º—Ä–æ –±–µ–≤–æ—Å–∏—Ç–∞ —Ñ–∏—Ä–∏—Å—Ç–µ–¥
        if movie_id:
            movie = get_movie(movie_id)
            if movie:
                try:
                    bot.send_video(
                        message.chat.id,
                        movie[2],
                        caption=f"üé¨ {movie[3]}\n\n{movie[4]}"
                    )
                except:
                    bot.send_message(message.chat.id, "‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ñ–∏–ª–º.")
        return
    
    markup = types.InlineKeyboardMarkup()
    
    # –¢—É–≥–º–∞“≥–æ–∏ –æ–±—É–Ω–∞
    for channel_id, channel_name in channels:
        channel_link = f"https://t.me/{channel_id[1:]}" if channel_id.startswith('@') else channel_id
        markup.add(types.InlineKeyboardButton(f"üì¢ {channel_name}", url=channel_link))
    
    # –¢—É–≥–º–∞–∏ —Å–∞–Ω“∑–∏—à–∏ –æ–±—É–Ω–∞
    callback_data = f"check_sub_{movie_id}" if movie_id else "check_sub_general"
    markup.add(types.InlineKeyboardButton("‚úÖ –°–∞–Ω“∑–∏—à–∏ –æ–±—É–Ω–∞", callback_data=callback_data))
    
    text = "üì∫ –ë–∞—Ä–æ–∏ —Ç–∞–º–æ—à–æ–∏ —Ñ–∏–ª–º –∞–≤–≤–∞–ª –±–∞ –∫–∞–Ω–∞–ª“≥–æ–∏ –∑–µ—Ä–∏–Ω –æ–±—É–Ω–∞ —à–∞–≤–µ–¥:\n\n"
    for i, (channel_id, channel_name) in enumerate(channels, 1):
        text += f"{i}Ô∏è‚É£ {channel_name}\n"
    text += "\n–ë–∞—ä–¥ –∞–∑ –æ–±—É–Ω–∞ —à—É–¥–∞–Ω, —Ç—É–≥–º–∞–∏ '–°–∞–Ω“∑–∏—à–∏ –æ–±—É–Ω–∞'-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥."
    
    bot.send_message(message.chat.id, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('check_sub'))
def check_subscription_callback(call):
    user_id = call.from_user.id
    
    if check_all_subscriptions(user_id):
        bot.answer_callback_query(call.id, "‚úÖ –®—É–º–æ –±–∞ “≥–∞—Ä–¥—É –∫–∞–Ω–∞–ª –æ–±—É–Ω–∞ —à—É–¥–∞–µ–¥!")
        
        # –ê–≥–∞—Ä movie_id –¥–æ—à—Ç–∞ –±–æ—à–µ–º, —Ñ–∏–ª–º—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–º
        if call.data.startswith('check_sub_') and len(call.data.split('_')) > 2:
            movie_id = call.data.split('_')[2]
            if movie_id != 'general':
                movie = get_movie(movie_id)
                if movie:
                    try:
                        bot.send_video(
                            call.message.chat.id,
                            movie[2],  # file_id
                            caption=f"üé¨ {movie[3]}\n\n{movie[4]}"
                        )
                        bot.delete_message(call.message.chat.id, call.message.message_id)
                    except:
                        bot.send_message(
                            call.message.chat.id,
                            "‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ñ–∏–ª–º."
                        )
        else:
            bot.edit_message_text(
                "‚úÖ –®—É–º–æ –±–∞ “≥–∞—Ä–¥—É –∫–∞–Ω–∞–ª –æ–±—É–Ω–∞ —à—É–¥–∞–µ–¥!\n\n"
                "–ê–∫–Ω—É–Ω –º–µ—Ç–∞–≤–æ–Ω–µ–¥ —Ñ–∏–ª–º“≥–æ—Ä–æ —Ç–∞–º–æ—à–æ –∫—É–Ω–µ–¥.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=None
            )
            # –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ç—É–≥–º–∞“≥–æ–∏ –∞—Å–æ—Å”£
            bot.send_message(
                call.message.chat.id,
                "–ú–µ–Ω—é–∏ –∞—Å–æ—Å”£:",
                reply_markup=get_main_keyboard(call.from_user.id)
            )
    else:
        bot.answer_callback_query(call.id, "‚ùå –®—É–º–æ “≥–∞–Ω”Ø–∑ –±–∞ “≥–∞–º–∞–∏ –∫–∞–Ω–∞–ª“≥–æ –æ–±—É–Ω–∞ –Ω–∞—à—É–¥–∞–µ–¥!")

# –ö–æ–º–∞–Ω–¥–∞“≥–æ–∏ –∞–¥–º–∏–Ω
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id == ADMIN_ID:
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚ûï –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º", callback_data="add_movie")
        )
        markup.add(
            types.InlineKeyboardButton("üìã –†”Ø–π—Ö–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ", callback_data="list_movies")
        )
        markup.add(
            types.InlineKeyboardButton("üóë –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º", callback_data="delete_movie")
        )
        
        bot.send_message(
            message.chat.id,
            "üîß –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:",
            reply_markup=markup
        )
    else:
        bot.send_message(message.chat.id, "‚ùå –®—É–º–æ –∞–¥–º–∏–Ω –Ω–µ—Å—Ç–µ–¥.")

@bot.callback_query_handler(func=lambda call: call.data in ['add_by_file', 'add_by_id'])
def add_movie_method_callback(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "‚ùå –®—É–º–æ –∞–¥–º–∏–Ω –Ω–µ—Å—Ç–µ–¥!")
        return
    
    if call.data == 'add_by_file':
        bot.edit_message_text(
            "üìπ –§–∏–ª–º–∏ —Ö—É–¥—Ä–æ –±–∞ –º–∞–Ω —Ñ–∏—Ä–∏—Å—Ç–µ–¥ (–≤–∏–¥–µ–æ—Ñ–∞–π–ª).\n\n"
            "–ë–∞—ä–¥–∞–Ω –º–∞–Ω –∞–∑ —à—É–º–æ –Ω–æ–º–∏ —Ñ–∏–ª–º –≤–∞ —Ç–∞–≤—Å–∏—Ñ—Ä–æ –º–µ–ø—É—Ä—Å–∞–º.",
            call.message.chat.id,
            call.message.message_id
        )
        bot.register_next_step_handler(call.message, process_movie_file)
    
    elif call.data == 'add_by_id':
        bot.edit_message_text(
            "üÜî File ID-–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—Ä–æ –Ω–∞–≤–∏—Å–µ–¥:\n\n"
            "üí° **–ß”£ —Ç–∞–≤—Ä File ID –≥–∏—Ä–∏—Ñ—Ç–∞–Ω?**\n"
            "1. –§–∏–ª–º—Ä–æ –±–∞ –±–æ—Ç–∞—Ç–æ–Ω —Ñ–∏—Ä–∏—Å—Ç–µ–¥\n"
            "2. –ê–∑ Developer Tools File ID-—Ä–æ –Ω—É—Å—Ö–∞ –∫—É–Ω–µ–¥\n"
            "3. –Å –∞–∑ –±–æ—Ç“≥–æ–∏ –º–∞—Ö—Å—É—Å –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥\n\n"
            "–ú–∏—Å–æ–ª: `BAADBAADrwADBREAAYag4B5vl-UWAgAC`",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown'
        )
        bot.register_next_step_handler(call.message, process_file_id_input)

def process_file_id_input(message):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ File ID-–∏ –¥–æ—Ö–∏–ª—à—É–¥–∞"""
    file_id = message.text.strip()
    
    # –°–∞–Ω“∑–∏—à–∏ File ID (–æ–¥–¥”£)
    if len(file_id) < 10 or ' ' in file_id:
        bot.send_message(
            message.chat.id,
            "‚ùå File ID –Ω–æ–¥—É—Ä—É—Å—Ç –∞—Å—Ç!\n\n"
            "File ID –±–æ—è–¥:\n"
            "‚Ä¢ –î–∞—Ä–æ–∑—Ç–∞—Ä –∞–∑ 10 —Å–∏–º–≤–æ–ª –±–æ—à–∞–¥\n"
            "‚Ä¢ –ë–∏–¥—É–Ω–∏ —Ñ–æ—Å–∏–ª–∞ –±–æ—à–∞–¥\n"
            "‚Ä¢ –ê–∑ “≥—É—Ä—É—Ñ –≤–∞ —Ä–∞“õ–∞–º“≥–æ –∏–±–æ—Ä–∞—Ç –±–æ—à–∞–¥\n\n"
            "–õ—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥:"
        )
        bot.register_next_step_handler(message, process_file_id_input)
        return
    
    # –°–∞–Ω“∑–∏—à–∏ –∫–æ—Ä–∏–∏ File ID
    try:
        # –ö”Ø—à–∏—à–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –≤–∏–¥–µ–æ –±–∞—Ä–æ–∏ —Å–∞–Ω“∑–∏—à
        test_message = bot.send_video(
            message.chat.id,
            file_id,
            caption="üß™ –°–∞–Ω“∑–∏—à–∏ File ID..."
        )
        
        # –ê–≥–∞—Ä –º—É–≤–∞—Ñ—Ñ–∞“õ –±–æ—à–∞–¥, –ø–∞—ë–º—Ä–æ –Ω–µ—Å—Ç –º–µ–∫—É–Ω–µ–º
        bot.delete_message(message.chat.id, test_message.message_id)
        
        # –ò–¥–æ–º–∞ –¥–æ–¥–∞–Ω–∏ —Ä–∞–≤–∞–Ω–¥–∏ –∏–ª–æ–≤–∞–∏ —Ñ–∏–ª–º
        bot.send_message(
            message.chat.id,
            "‚úÖ File ID –¥—É—Ä—É—Å—Ç –∞—Å—Ç!\n\n"
            "üìù –ù–æ–º–∏ —Ñ–∏–ª–º—Ä–æ –Ω–∞–≤–∏—Å–µ–¥:"
        )
        bot.register_next_step_handler(message, process_movie_title_from_id, file_id)
        
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚ùå File ID –∫–æ—Ä –Ω–∞–º–µ–∫—É–Ω–∞–¥!\n\n"
            f"–•–∞—Ç–æ–≥”£: {str(e)[:100]}\n\n"
            f"–õ—É—Ç—Ñ–∞–Ω File ID-–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –Ω–∞–≤–∏—Å–µ–¥:"
        )
        bot.register_next_step_handler(message, process_file_id_input)

def process_movie_title_from_id(message, file_id):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ –Ω–æ–º–∏ —Ñ–∏–ª–º –±–∞—ä–¥ –∞–∑ File ID"""
    title = message.text.strip()
    
    bot.send_message(
        message.chat.id,
        "üìù –¢–∞–≤—Å–∏—Ñ–∏ —Ñ–∏–ª–º—Ä–æ –Ω–∞–≤–∏—Å–µ–¥ (—ë /skip –±–∞—Ä–æ–∏ –≥—É–∑–∞—Ä–∏—à):"
    )
    
    bot.register_next_step_handler(message, process_movie_description_from_id, file_id, title)

def process_movie_description_from_id(message, file_id, title):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ —Ç–∞–≤—Å–∏—Ñ –≤–∞ –∞–Ω“∑–æ–º–∏ –∏–ª–æ–≤–∞–∏ —Ñ–∏–ª–º –±–æ File ID"""
    description = message.text if message.text != '/skip' else ""
    
    # –°–æ—Ö—Ç–∞–Ω–∏ ID-–∏ —è–∫—Ç–∞ –±–∞—Ä–æ–∏ —Ñ–∏–ª–º
    movie_id = str(uuid.uuid4())[:8]
    
    # –ó–∞—Ö–∏—Ä–∞–∏ —Ñ–∏–ª–º –¥–∞—Ä –±–∞–∑–∞–∏ –¥–æ–¥–∞“≥–æ
    link = save_movie(movie_id, file_id, title, description)
    
    # –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –Ω–∞—Ç–∏“∑–∞ –±–æ –Ω–∏—à–æ–Ω–¥–æ–¥–∞–Ω–∏ —Ñ–∏–ª–º
    try:
        bot.send_video(
            message.chat.id,
            file_id,
            caption=(
                f"‚úÖ –§–∏–ª–º –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∏–ª–æ–≤–∞ —à—É–¥!\n\n"
                f"üé¨ –ù–æ–º: {title}\n"
                f"üÜî ID: {movie_id}\n"
                f"üîó –°–∏–ª–∫–∞: {link}\n\n"
                f"–ò–Ω —Å–∏–ª–∫–∞—Ä–æ –¥–∞—Ä –∫–∞–Ω–∞–ª–∏ —Ö—É–¥ –º—É–±–æ–¥–∏–ª–∞ –∫—É–Ω–µ–¥!"
            )
        )
    except:
        bot.send_message(
            message.chat.id,
            f"‚úÖ –§–∏–ª–º –∏–ª–æ–≤–∞ —à—É–¥ (File ID –∫–æ—Ä –º–µ–∫—É–Ω–∞–¥)!\n\n"
            f"üé¨ –ù–æ–º: {title}\n"
            f"üÜî ID: {movie_id}\n"
            f"üîó –°–∏–ª–∫–∞: {link}\n\n"
            f"–ò–Ω —Å–∏–ª–∫–∞—Ä–æ –¥–∞—Ä –∫–∞–Ω–∞–ª–∏ —Ö—É–¥ –º—É–±–æ–¥–∏–ª–∞ –∫—É–Ω–µ–¥!"
        )
@bot.callback_query_handler(func=lambda call: call.data in ['add_channel', 'list_channels', 'remove_channel'])
def channel_management_callback(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "‚ùå –®—É–º–æ –∞–¥–º–∏–Ω –Ω–µ—Å—Ç–µ–¥!")
        return
    
    if call.data == 'add_channel':
        bot.send_message(
            call.message.chat.id,
            "‚ûï ID-–∏ –∫–∞–Ω–∞–ª–∏ –Ω–∞–≤—Ä–æ –Ω–∞–≤–∏—Å–µ–¥ (–º–∏—Å–æ–ª: @channel_name):"
        )
        bot.register_next_step_handler(call.message, process_channel_id)
    
    elif call.data == 'list_channels':
        channels = get_active_channels()
        if channels:
            text = "üìã –†”Ø–π—Ö–∞—Ç–∏ –∫–∞–Ω–∞–ª“≥–æ:\n\n"
            for i, (channel_id, channel_name) in enumerate(channels, 1):
                text += f"{i}. {channel_name}\n   ID: {channel_id}\n\n"
        else:
            text = "üìã “≤–µ“∑ –∫–∞–Ω–∞–ª –∏–ª–æ–≤–∞ –Ω–∞—à—É–¥–∞–∞—Å—Ç."
        
        bot.send_message(call.message.chat.id, text)
    
    elif call.data == 'remove_channel':
        channels = get_active_channels()
        if channels:
            markup = types.InlineKeyboardMarkup()
            for channel_id, channel_name in channels:
                markup.add(
                    types.InlineKeyboardButton(
                        f"üóë {channel_name}",
                        callback_data=f"remove_ch_{channel_id}"
                    )
                )
            
            bot.send_message(
                call.message.chat.id,
                "üóë –ö–∞–¥–æ–º –∫–∞–Ω–∞–ª—Ä–æ —Ö–æ—Ä–∏“∑ –∫–∞—Ä–¥–∞–Ω –º–µ—Ö–æ“≥–µ–¥?",
                reply_markup=markup
            )
        else:
            bot.send_message(call.message.chat.id, "üìã –ö–∞–Ω–∞–ª–µ –±–∞—Ä–æ–∏ —Ö–æ—Ä–∏“∑ –∫–∞—Ä–¥–∞–Ω –Ω–µ—Å—Ç.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('remove_ch_'))
def remove_channel_callback(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "‚ùå –®—É–º–æ –∞–¥–º–∏–Ω –Ω–µ—Å—Ç–µ–¥!")
        return
    
    channel_id = call.data.replace('remove_ch_', '')
    remove_channel(channel_id)
    
    bot.answer_callback_query(call.id, "‚úÖ –ö–∞–Ω–∞–ª —Ö–æ—Ä–∏“∑ –∫–∞—Ä–¥–∞ —à—É–¥!")
    bot.edit_message_text(
        "‚úÖ –ö–∞–Ω–∞–ª –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç —Ö–æ—Ä–∏“∑ –∫–∞—Ä–¥–∞ —à—É–¥.",
        call.message.chat.id,
        call.message.message_id
    )

def process_channel_id(message):
    channel_id = message.text.strip()
    
    if not channel_id.startswith('@'):
        bot.send_message(message.chat.id, "‚ùå ID-–∏ –∫–∞–Ω–∞–ª –±–æ—è–¥ –±–æ @ –æ“ì–æ–∑ —à–∞–≤–∞–¥. –ú–∏—Å–æ–ª: @my_channel")
        return
    
    bot.send_message(message.chat.id, "üìù –ù–æ–º–∏ –∫–∞–Ω–∞–ª—Ä–æ –Ω–∞–≤–∏—Å–µ–¥:")
    bot.register_next_step_handler(message, process_channel_name, channel_id)

# –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ “≥–∞–º–∞–∏ –∫–æ—Ä–±–∞—Ä–æ–Ω–∏ —Ñ–∞—ä–æ–ª–∏ –±–æ—Ç
def get_all_users():
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute('SELECT DISTINCT user_id FROM user_subscriptions')
    users = cursor.fetchall()
    conn.close()
    return [user[0] for user in users]

# –ó–∞—Ö–∏—Ä–∞–∏ –∫–æ—Ä–±–∞—Ä –¥–∞—Ä –±–∞–∑–∞–∏ –¥–æ–¥–∞“≥–æ
def save_user(user_id):
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO user_subscriptions (user_id, channel_id, subscribed) VALUES (?, ?, ?)', 
                   (user_id, 'temp', False))
    conn.commit()
    conn.close()

def process_channel_name(message, channel_id):
    channel_name = message.text.strip()
    
    try:
        # –°–∞–Ω“∑–∏—à–∏ –¥–∞—Å—Ç—Ä–∞—Å–∏–∏ –∫–∞–Ω–∞–ª
        chat = bot.get_chat(channel_id)
        add_channel(channel_id, channel_name)
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ö–∞–Ω–∞–ª –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∏–ª–æ–≤–∞ —à—É–¥!\n\n"
            f"üì¢ –ù–æ–º: {channel_name}\n"
            f"üÜî ID: {channel_id}\n\n"
            f"üîÑ “≤–∞–º–∞–∏ –∫–æ—Ä–±–∞—Ä–æ–Ω –∞–∑ —à–∞—Ä—Ç–∏ –Ω–∞–≤–∏ –æ–±—É–Ω–∞ –æ–≥–æ“≥ –∫–∞—Ä–¥–∞ –º–µ—à–∞–≤–∞–Ω–¥..."
        )
        
        # –û–≥–æ“≥ –∫–∞—Ä–¥–∞–Ω–∏ “≥–∞–º–∞–∏ –∫–æ—Ä–±–∞—Ä–æ–Ω
        notify_users_about_new_channel(channel_id, channel_name)
        
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚ùå –•–∞—Ç–æ–≥”£: –ö–∞–Ω–∞–ª —ë—Ñ—Ç –Ω–∞—à—É–¥ —ë –±–æ—Ç –∞–¥–º–∏–Ω –Ω–µ—Å—Ç.\n\n"
            f"–ú—É—Ç–º–∞–∏–Ω —à–∞–≤–µ–¥, –∫–∏:\n"
            f"‚Ä¢ ID –¥—É—Ä—É—Å—Ç –∞—Å—Ç\n"
            f"‚Ä¢ –ë–æ—Ç –¥–∞—Ä –∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω –∞—Å—Ç"
        )

def notify_users_about_new_channel(channel_id, channel_name):
    """–û–≥–æ“≥–∫—É–Ω–∏–∏ “≥–∞–º–∞–∏ –∫–æ—Ä–±–∞—Ä–æ–Ω –¥–∞—Ä –±–æ—Ä–∞–∏ –∫–∞–Ω–∞–ª–∏ –Ω–∞–≤"""
    users = get_all_users()
    
    markup = types.InlineKeyboardMarkup()
    channel_link = f"https://t.me/{channel_id[1:]}" if channel_id.startswith('@') else channel_id
    markup.add(types.InlineKeyboardButton(f"üì¢ –û–±—É–Ω–∞ –±–∞ {channel_name}", url=channel_link))
    markup.add(types.InlineKeyboardButton("‚úÖ –°–∞–Ω“∑–∏—à–∏ –æ–±—É–Ω–∞", callback_data="check_new_sub"))
    
    message_text = (
        f"üì¢ –®–ê–†–¢–ò –ù–ê–í!\n\n"
        f"–ë–∞—Ä–æ–∏ –∏–¥–æ–º–∞ –¥–æ–¥–∞–Ω–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –±–æ—Ç, —à—É–º–æ –±–æ—è–¥ –±–∞ –∫–∞–Ω–∞–ª–∏ –Ω–∞–≤ –Ω–∏–∑ –æ–±—É–Ω–∞ —à–∞–≤–µ–¥:\n\n"
        f"üÜï {channel_name}\n\n"
        f"‚ö†Ô∏è –¢–æ –≤–∞“õ—Ç–µ –∫–∏ –±–∞ –∏–Ω –∫–∞–Ω–∞–ª –æ–±—É–Ω–∞ –Ω–∞—à–∞–≤–µ–¥, –Ω–∞–º–µ—Ç–∞–≤–æ–Ω–µ–¥ –∞–∑ –±–æ—Ç –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥."
    )
    
    successful = 0
    failed = 0
    
    for user_id in users:
        try:
            if user_id != ADMIN_ID:  # –ê–¥–º–∏–Ω—Ä–æ –æ–≥–æ“≥ –Ω–∞–∫—É–Ω–µ–º
                bot.send_message(user_id, message_text, reply_markup=markup)
                successful += 1
        except:
            failed += 1
    
    # –ì—É–∑–æ—Ä–∏—à–∏ –Ω–∞—Ç–∏“∑–∞ –±–∞ –∞–¥–º–∏–Ω
    bot.send_message(
        ADMIN_ID,
        f"üìä –ù–∞—Ç–∏“∑–∞–∏ –æ–≥–æ“≥–∫—É–Ω”£:\n"
        f"‚úÖ –ú—É–≤–∞—Ñ—Ñ–∞“õ: {successful} –∫–æ—Ä–±–∞—Ä\n"
        f"‚ùå –ù–æ–∫–æ–º: {failed} –∫–æ—Ä–±–∞—Ä"
    )

@bot.callback_query_handler(func=lambda call: call.data == "check_new_sub")
def check_new_subscription(call):
    user_id = call.from_user.id
    
    if check_all_subscriptions(user_id):
        bot.answer_callback_query(call.id, "‚úÖ –®—É–º–æ –±–∞ “≥–∞–º–∞–∏ –∫–∞–Ω–∞–ª“≥–æ –æ–±—É–Ω–∞ —à—É–¥–∞–µ–¥!")
        bot.edit_message_text(
            "‚úÖ –¢–∞–±—Ä–∏–∫! –®—É–º–æ –±–∞ “≥–∞–º–∞–∏ –∫–∞–Ω–∞–ª“≥–æ –æ–±—É–Ω–∞ —à—É–¥–∞–µ–¥.\n\n"
            "–ê–∫–Ω—É–Ω –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –∞–∑ –±–æ—Ç –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=None
        )
        # –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ç—É–≥–º–∞“≥–æ–∏ –∞—Å–æ—Å”£
        bot.send_message(
            call.message.chat.id,
            "–ú–µ–Ω—é–∏ –∞—Å–æ—Å”£:",
            reply_markup=get_main_keyboard(user_id)
        )
    else:
        bot.answer_callback_query(call.id, "‚ùå –®—É–º–æ “≥–∞–Ω”Ø–∑ –±–∞ “≥–∞–º–∞–∏ –∫–∞–Ω–∞–ª“≥–æ –æ–±—É–Ω–∞ –Ω–∞—à—É–¥–∞–µ–¥!")
        
        # –ù–∏—à–æ–Ω –¥–æ–¥–∞–Ω–∏ –∫–∞–Ω–∞–ª“≥–æ–µ–∫–∏ –æ–±—É–Ω–∞ –Ω–∞—à—É–¥–∞–∞–Ω–¥
        channels = get_active_channels()
        unsubscribed = []
        
        for channel_id, channel_name in channels:
            if not check_subscription(user_id, channel_id):
                unsubscribed.append((channel_id, channel_name))
        
        if unsubscribed:
            text = "‚ùå –®—É–º–æ –±–∞ –∏–Ω –∫–∞–Ω–∞–ª“≥–æ “≥–∞–Ω”Ø–∑ –æ–±—É–Ω–∞ –Ω–∞—à—É–¥–∞–µ–¥:\n\n"
            markup = types.InlineKeyboardMarkup()
            
            for channel_id, channel_name in unsubscribed:
                text += f"üì¢ {channel_name}\n"
                channel_link = f"https://t.me/{channel_id[1:]}" if channel_id.startswith('@') else channel_id
                markup.add(types.InlineKeyboardButton(f"üì¢ {channel_name}", url=channel_link))
            
            markup.add(types.InlineKeyboardButton("‚úÖ –°–∞–Ω“∑–∏—à–∏ –æ–±—É–Ω–∞", callback_data="check_new_sub"))
            
            bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
@bot.callback_query_handler(func=lambda call: call.data in ['add_movie', 'list_movies', 'delete_movie'])
def admin_callback_handler(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "‚ùå –®—É–º–æ –∞–¥–º–∏–Ω –Ω–µ—Å—Ç–µ–¥!")
        return
    
    if call.data == 'add_movie':
        bot.send_message(
            call.message.chat.id,
            "üìπ –§–∏–ª–º–∏ —Ö—É–¥—Ä–æ –±–∞ –º–∞–Ω —Ñ–∏—Ä–∏—Å—Ç–µ–¥ (–≤–∏–¥–µ–æ—Ñ–∞–π–ª).\n\n"
            "–ë–∞—ä–¥–∞–Ω –º–∞–Ω –∞–∑ —à—É–º–æ –Ω–æ–º–∏ —Ñ–∏–ª–º –≤–∞ —Ç–∞–≤—Å–∏—Ñ—Ä–æ –º–µ–ø—É—Ä—Å–∞–º."
        )
        bot.register_next_step_handler(call.message, process_movie_file)
    
    elif call.data == 'list_movies':
        movies = get_all_movies()
        if movies:
            text = "üìã –†”Ø–π—Ö–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ:\n\n"
            for movie in movies:
                text += f"üé¨ {movie[3]} (ID: {movie[1]})\n"
                text += f"üîó {movie[5]}\n\n"
            
            bot.send_message(call.message.chat.id, text)
        else:
            bot.send_message(call.message.chat.id, "üìã “≤–∞–Ω”Ø–∑ —Ñ–∏–ª–º–µ –∏–ª–æ–≤–∞ –Ω–∞—à—É–¥–∞–∞—Å—Ç.")
    
    elif call.data == 'delete_movie':
        movies = get_all_movies()
        if movies:
            markup = types.InlineKeyboardMarkup()
            for movie in movies:
                markup.add(
                    types.InlineKeyboardButton(
                        f"üóë {movie[3]}", 
                        callback_data=f"del_{movie[1]}"
                    )
                )
            
            bot.send_message(
                call.message.chat.id,
                "üóë –ö–∞–¥–æ–º —Ñ–∏–ª–º—Ä–æ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω –º–µ—Ö–æ“≥–µ–¥?",
                reply_markup=markup
            )
        else:
            bot.send_message(call.message.chat.id, "üìã –§–∏–ª–º–µ –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω –Ω–µ—Å—Ç.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('del_'))
def delete_movie_callback(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "‚ùå –®—É–º–æ –∞–¥–º–∏–Ω –Ω–µ—Å—Ç–µ–¥!")
        return
    
    movie_id = call.data.split('_')[1]
    
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM movies WHERE movie_id = ?', (movie_id,))
    conn.commit()
    conn.close()
    
    bot.answer_callback_query(call.id, "‚úÖ –§–∏–ª–º –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥!")
    bot.edit_message_text(
        "‚úÖ –§–∏–ª–º –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥.",
        call.message.chat.id,
        call.message.message_id
    )

def process_movie_file(message):
    # –ê–≥–∞—Ä –º–∞—Ç–Ω –±–æ—à–∞–¥, ehtimol File ID –∞—Å—Ç
    if message.content_type == 'text':
        file_id = message.text.strip()
        
        # –°–∞–Ω“∑–∏—à –æ—ë –∏–Ω File ID –∞—Å—Ç
        if len(file_id) > 10 and ' ' not in file_id and ('BAAC' in file_id or 'BQAC' in file_id or len(file_id) > 50):
            bot.send_message(
                message.chat.id,
                "üÜî –ú–∞–Ω –º–µ–±–∏–Ω–∞–º, –∫–∏ —à—É–º–æ File ID —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–µ–¥!\n\n"
                "üß™ –°–∞–Ω“∑–∏—à..."
            )
            
            # –°–∞–Ω“∑–∏—à–∏ File ID
            try:
                test_message = bot.send_video(
                    message.chat.id,
                    file_id,
                    caption="üß™ –°–∞–Ω“∑–∏—à–∏ File ID..."
                )
                
                # –ê–≥–∞—Ä –º—É–≤–∞—Ñ—Ñ–∞“õ –±–æ—à–∞–¥
                bot.delete_message(message.chat.id, test_message.message_id)
                
                bot.send_message(
                    message.chat.id,
                    "‚úÖ File ID –¥—É—Ä—É—Å—Ç –∞—Å—Ç!\n\n"
                    "üìù –ù–æ–º–∏ —Ñ–∏–ª–º—Ä–æ –Ω–∞–≤–∏—Å–µ–¥:"
                )
                
                bot.register_next_step_handler(message, process_movie_title, file_id)
                return
                
            except Exception as e:
                bot.send_message(
                    message.chat.id,
                    f"‚ùå File ID –∫–æ—Ä –Ω–∞–º–µ–∫—É–Ω–∞–¥!\n\n"
                    f"–õ—É—Ç—Ñ–∞–Ω:\n"
                    f"‚Ä¢ –í–∏–¥–µ–æ—Ñ–∞–π–ª —Ñ–∏—Ä–∏—Å—Ç–µ–¥, —ë\n"
                    f"‚Ä¢ File ID-–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –Ω–∞–≤–∏—Å–µ–¥"
                )
                bot.register_next_step_handler(message, process_movie_file)
                return
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –ò–Ω File ID –Ω–æ–¥—É—Ä—É—Å—Ç –º–µ–Ω–∞–º–æ—è–¥.\n\n"
                "–õ—É—Ç—Ñ–∞–Ω:\n"
                "üìπ –í–∏–¥–µ–æ—Ñ–∞–π–ª —Ñ–∏—Ä–∏—Å—Ç–µ–¥, —ë\n"
                "üÜî File ID-–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –Ω–∞–≤–∏—Å–µ–¥"
            )
            bot.register_next_step_handler(message, process_movie_file)
            return
    
    # –ê–≥–∞—Ä –≤–∏–¥–µ–æ—Ñ–∞–π–ª –±–æ—à–∞–¥
    elif message.content_type == 'video':
        file_id = message.video.file_id
        
        bot.send_message(
            message.chat.id,
            "‚úÖ –í–∏–¥–µ–æ—Ñ–∞–π–ª “õ–∞–±—É–ª —à—É–¥!\n\n"
            "üìù –ù–æ–º–∏ —Ñ–∏–ª–º—Ä–æ –Ω–∞–≤–∏—Å–µ–¥:"
        )
        
        bot.register_next_step_handler(message, process_movie_title, file_id)
    
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå –õ—É—Ç—Ñ–∞–Ω:\n"
            "üìπ –í–∏–¥–µ–æ—Ñ–∞–π–ª —Ñ–∏—Ä–∏—Å—Ç–µ–¥, —ë\n"
            "üÜî File ID-–∏ –≤–∏–¥–µ–æ—Ä–æ –Ω–∞–≤–∏—Å–µ–¥\n\n"
            "–ú–∏—Å–æ–ª–∏ File ID: `BAADBAADrwADBREAAYag4B5vl-UWAgAC`",
            parse_mode='Markdown'
        )
        bot.register_next_step_handler(message, process_movie_file)

def process_movie_title(message, file_id):
    title = message.text
    
    bot.send_message(
        message.chat.id,
        "üìù –¢–∞–≤—Å–∏—Ñ–∏ —Ñ–∏–ª–º—Ä–æ –Ω–∞–≤–∏—Å–µ–¥ (—ë /skip –±–∞—Ä–æ–∏ –≥—É–∑–∞—Ä–∏—à):"
    )
    
    bot.register_next_step_handler(message, process_movie_description, file_id, title)

def process_movie_description(message, file_id, title):
    description = message.text if message.text != '/skip' else ""
    
    # –°–æ—Ö—Ç–∞–Ω–∏ ID-–∏ —è–∫—Ç–∞ –±–∞—Ä–æ–∏ —Ñ–∏–ª–º
    movie_id = str(uuid.uuid4())[:8]
    
    # –ó–∞—Ö–∏—Ä–∞–∏ —Ñ–∏–ª–º –¥–∞—Ä –±–∞–∑–∞–∏ –¥–æ–¥–∞“≥–æ
    link = save_movie(movie_id, file_id, title, description)
    
    bot.send_message(
        message.chat.id,
        f"‚úÖ –§–∏–ª–º –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∏–ª–æ–≤–∞ —à—É–¥!\n\n"
        f"üé¨ –ù–æ–º: {title}\n"
        f"üÜî ID: {movie_id}\n"
        f"üîó –°–∏–ª–∫–∞: {link}\n\n"
        f"–ò–Ω —Å–∏–ª–∫–∞—Ä–æ –¥–∞—Ä –∫–∞–Ω–∞–ª–∏ —Ö—É–¥ –º—É–±–æ–¥–∏–ª–∞ –∫—É–Ω–µ–¥!"
    )

# –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ “≥–∞–º–∞–∏ —Ñ–∏–ª–º“≥–æ
def get_all_movies():
    conn = sqlite3.connect('movies.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM movies')
    movies = cursor.fetchall()
    
    conn.close()
    return movies

# –¢—É–≥–º–∞“≥–æ–∏ –∞—Å–æ—Å–∏–∏ –±–æ—Ç
def get_main_keyboard(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if user_id == ADMIN_ID:
        # –¢—É–≥–º–∞“≥–æ –±–∞—Ä–æ–∏ –∞–¥–º–∏–Ω
        markup.add("üîç –ü–æ–∏—Å–∫ –ø–æ ID", "üîé –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
        markup.add("‚ûï –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º", "üìã –†”Ø–π—Ö–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ")
        markup.add("üóë –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º", "üì¢ –ò–¥–æ—Ä–∞–∏ –∫–∞–Ω–∞–ª“≥–æ")
    else:
        # –¢—É–≥–º–∞“≥–æ –±–∞—Ä–æ–∏ –∫–æ—Ä–±–∞—Ä–∏ –æ–¥–¥”£
        markup.add("üîç –ü–æ–∏—Å–∫ –ø–æ ID", "üîé –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
    
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞—Ä–æ–∏ —Ç—É–≥–º–∞–∏ "–ü–æ–∏—Å–∫ –ø–æ ID"
@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –ø–æ ID")
def search_by_id_button(message):
    bot.send_message(
        message.chat.id,
        "üîç ID-–∏ —Ñ–∏–ª–º—Ä–æ –Ω–∞–≤–∏—Å–µ–¥:",
        reply_markup=types.ForceReply()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞—Ä–æ–∏ —Ç—É–≥–º–∞–∏ "–†–∞—Å—Å—ã–ª–∫–∞"
@bot.message_handler(func=lambda message: message.text == "üì° –†–∞—Å—Å—ã–ª–∫–∞")
def broadcast_button(message):
    if message.from_user.id == ADMIN_ID:
        bot.send_message(
            message.chat.id,
            "üì° **–†–∞—Å—Å—ã–ª–∫–∞ –±–∞ “≥–∞–º–∞–∏ –∫–æ—Ä–±–∞—Ä–æ–Ω**\n\n"
            "–ü–∞—ë–º–∏ —Ö—É–¥—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–¥. –ú–∞–Ω –æ–Ω—Ä–æ –±–∞ “≥–∞–º–∞ –∫–æ—Ä–±–∞—Ä–æ–Ω–∏ –±–æ—Ç –º–µ—Ñ–∏—Ä–∏—Å—Ç–∞–º.\n\n"
            "üí° **–ò–º–∫–æ–Ω–∏—è—Ç“≥–æ:**\n"
            "‚Ä¢ üìù –ú–∞—Ç–Ω\n"
            "‚Ä¢ üñº –†–∞—Å–º\n"
            "‚Ä¢ üìπ –í–∏–¥–µ–æ\n"
            "‚Ä¢ üìÑ –§–∞–π–ª\n"
            "‚Ä¢ üéµ –ê—É–¥–∏–æ\n"
            "‚Ä¢ üé§ –û–≤–æ–∑\n"
            "‚Ä¢ üé≠ –°—Ç–∏–∫–µ—Ä\n\n"
            "‚ùå –ë–∞—Ä–æ–∏ –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω /cancel –Ω–∞–≤–∏—Å–µ–¥",
            parse_mode='Markdown'
        )
        bot.register_next_step_handler(message, process_broadcast_content)
    else:
        bot.send_message(message.chat.id, "‚ùå –®—É–º–æ –∞–¥–º–∏–Ω –Ω–µ—Å—Ç–µ–¥.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞—Ä–æ–∏ —Ç—É–≥–º–∞–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–∏ —Ä–∞—Å—Å—ã–ª–∫–∞"
@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–∏ —Ä–∞—Å—Å—ã–ª–∫–∞")
def broadcast_stats_button(message):
    if message.from_user.id == ADMIN_ID:
        conn = sqlite3.connect('movies.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT COUNT(*) as total_broadcasts,
                   SUM(sent_count) as total_sent,
                   SUM(failed_count) as total_failed,
                   SUM(total_count) as total_attempts
            FROM broadcast_posts
        ''')
        
        stats = cursor.fetchone()
        
        cursor.execute('''
            SELECT post_content, post_type, sent_count, failed_count, total_count, created_at
            FROM broadcast_posts
            ORDER BY created_at DESC
            LIMIT 5
        ''')
        
        recent_broadcasts = cursor.fetchall()
        conn.close()
        
        text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–∏ —Ä–∞—Å—Å—ã–ª–∫–∞**\n\n"
        
        if stats and stats[0] > 0:
            text += f"üìà **–£–º—É–º”£:**\n"
            text += f"‚Ä¢ “∂–∞–º—ä–∏ —Ä–∞—Å—Å—ã–ª–∫–∞“≥–æ: {stats[0]}\n"
            text += f"‚Ä¢ –§–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥: {stats[1] or 0}\n"
            text += f"‚Ä¢ –•–∞—Ç–æ–≥”£: {stats[2] or 0}\n"
            text += f"‚Ä¢ “∂–∞–º—ä–∏ –∫”Ø—à–∏—à“≥–æ: {stats[3] or 0}\n\n"
            
            if recent_broadcasts:
                text += "üìã **5 —Ä–∞—Å—Å—ã–ª–∫–∞–∏ –æ—Ö–∏—Ä–∏–Ω:**\n"
                for i, broadcast in enumerate(recent_broadcasts, 1):
                    content = broadcast[0][:30] + "..." if len(broadcast[0]) > 30 else broadcast[0]
                    text += f"{i}. {broadcast[1].upper()} - {broadcast[2]}/{broadcast[4]} ‚úÖ\n"
                    text += f"   üìù {content}\n"
        else:
            text += "üì≠ “≤–∞–Ω”Ø–∑ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—à—É–¥–∞–∞—Å—Ç."
        
        bot.send_message(message.chat.id, text, parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, "‚ùå –®—É–º–æ –∞–¥–º–∏–Ω –Ω–µ—Å—Ç–µ–¥.")

def process_broadcast_content(message):
    """–ö–æ—Ä–∫–∞—Ä–¥–∏ –º”Ø“≥—Ç–∞–≤–æ–∏ —Ä–∞—Å—Å—ã–ª–∫–∞"""
    if message.text and message.text == '/cancel':
        bot.send_message(
            message.chat.id,
            "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥.",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
    
    # –ú—É–∞–π—è–Ω –∫–∞—Ä–¥–∞–Ω–∏ –Ω–∞–≤—ä–∏ –ø–∞—ë–º
    content = ""
    message_type = ""
    file_id = None
    
    if message.content_type == 'text':
        content = message.text
        message_type = 'text'
    elif message.content_type == 'photo':
        content = message.caption if message.caption else ""
        message_type = 'photo'
        file_id = message.photo[-1].file_id
    elif message.content_type == 'video':
        content = message.caption if message.caption else ""
        message_type = 'video'
        file_id = message.video.file_id
    elif message.content_type == 'document':
        content = message.caption if message.caption else ""
        message_type = 'document'
        file_id = message.document.file_id
    elif message.content_type == 'audio':
        content = message.caption if message.caption else ""
        message_type = 'audio'
        file_id = message.audio.file_id
    elif message.content_type == 'voice':
        content = message.caption if message.caption else ""
        message_type = 'voice'
        file_id = message.voice.file_id
    elif message.content_type == 'video_note':
        content = ""
        message_type = 'video_note'
        file_id = message.video_note.file_id
    elif message.content_type == 'sticker':
        content = "–°—Ç–∏–∫–µ—Ä —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥"
        message_type = 'sticker'
        file_id = message.sticker.file_id
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå –ò–Ω –Ω–∞–≤—ä–∏ –ø–∞—ë–º –¥–∞—Å—Ç–≥–∏—Ä”£ –Ω–∞–º–µ—à–∞–≤–∞–¥.\n"
            "–õ—É—Ç—Ñ–∞–Ω –º–∞—Ç–Ω, —Ä–∞—Å–º, –≤–∏–¥–µ–æ —ë —Ñ–∞–π–ª —Ñ–∏—Ä–∏—Å—Ç–µ–¥."
        )
        bot.register_next_step_handler(message, process_broadcast_content)
        return
    
    # –¢–∞—Å–¥–∏“õ–∏ —Ä–∞—Å—Å—ã–ª–∫–∞
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –¢–∞—Å–¥–∏“õ –∫—É–Ω–µ–¥", callback_data=f"confirm_broadcast"),
        types.InlineKeyboardButton("‚ùå –ë–µ–∫–æ—Ä –∫—É–Ω–µ–¥", callback_data="cancel_broadcast")
    )
    
    users_count = len(get_all_users()) - 1  # -1 –±–∞—Ä–æ–∏ –∞–¥–º–∏–Ω
    
    preview_text = f"üì° **–¢–∞—Å–¥–∏“õ–∏ —Ä–∞—Å—Å—ã–ª–∫–∞**\n\n"
    preview_text += f"üìä –ë–∞ {users_count} –∫–æ—Ä–±–∞—Ä —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ –º–µ—à–∞–≤–∞–¥\n"
    preview_text += f"üéØ –ù–∞–≤—ä: {message_type.upper()}\n\n"
    
    if content:
        preview_text += f"üìù **–ú”Ø“≥—Ç–∞–≤–æ:**\n{content[:200]}"
        if len(content) > 200:
            preview_text += "..."
    
    preview_text += f"\n\n‚ö†Ô∏è –ü–∞—Å –∞–∑ —Ç–∞—Å–¥–∏“õ, –ø–∞—ë–º –±–∞ “≥–∞–º–∞ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ –º–µ—à–∞–≤–∞–¥!"
    
    # –ó–∞—Ö–∏—Ä–∞–∏ –º–∞—ä–ª—É–º–æ—Ç –±–∞—Ä–æ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –±–∞—ä–¥–∏–Ω–∞
    bot.broadcast_data = {
        'content': content,
        'type': message_type,
        'file_id': file_id
    }
    
    bot.send_message(
        message.chat.id,
        preview_text,
        reply_markup=markup,
        parse_mode='Markdown'
    )

@bot.callback_query_handler(func=lambda call: call.data in ['confirm_broadcast', 'cancel_broadcast'])
def broadcast_confirmation_callback(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "‚ùå –®—É–º–æ –∞–¥–º–∏–Ω –Ω–µ—Å—Ç–µ–¥!")
        return
    
    if call.data == 'cancel_broadcast':
        bot.edit_message_text(
            "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥.",
            call.message.chat.id,
            call.message.message_id
        )
        if hasattr(bot, 'broadcast_data'):
            del bot.broadcast_data
        return
    
    if call.data == 'confirm_broadcast':
        if not hasattr(bot, 'broadcast_data'):
            bot.answer_callback_query(call.id, "‚ùå –ú–∞—ä–ª—É–º–æ—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —ë—Ñ—Ç –Ω–∞—à—É–¥!")
            return
        
        broadcast_data = bot.broadcast_data
        
        bot.edit_message_text(
            "üîÑ –†–∞—Å—Å—ã–ª–∫–∞ –æ“ì–æ–∑ —ë—Ñ—Ç...\n\n‚è≥ –õ—É—Ç—Ñ–∞–Ω –∏–Ω—Ç–∏–∑–æ—Ä —à–∞–≤–µ–¥...",
            call.message.chat.id,
            call.message.message_id
        )
        
        # –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∞
        try:
            sent_count, failed_count, total_count = send_broadcast_message(
                broadcast_data['content'],
                broadcast_data['type'],
                broadcast_data['file_id']
            )
            
            # –ù–∏—à–æ–Ω–¥–æ–¥–∞–Ω–∏ –Ω–∞—Ç–∏“∑–∞
            result_text = f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∞–Ω“∑–æ–º —ë—Ñ—Ç!**\n\n"
            result_text += f"üìä **–ù–∞—Ç–∏“∑–∞“≥–æ:**\n"
            result_text += f"‚Ä¢ ‚úÖ –ú—É–≤–∞—Ñ—Ñ–∞“õ: {sent_count}\n"
            result_text += f"‚Ä¢ ‚ùå –•–∞—Ç–æ–≥”£: {failed_count}\n"
            result_text += f"‚Ä¢ üìà “∂–∞–º—ä–∏ –∫”Ø—à–∏—à“≥–æ: {total_count}\n"
            
            if total_count > 0:
                success_rate = (sent_count / total_count) * 100
                result_text += f"‚Ä¢ üìä –ú—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç: {success_rate:.1f}%"
            
            bot.edit_message_text(
                result_text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            bot.edit_message_text(
                f"‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞:\n{str(e)[:200]}",
                call.message.chat.id,
                call.message.message_id
            )
        
        # –ü–æ–∫ –∫–∞—Ä–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç
        if hasattr(bot, 'broadcast_data'):
            del bot.broadcast_data
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞—Ä–æ–∏ —Ç—É–≥–º–∞–∏ "–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"
@bot.message_handler(func=lambda message: message.text == "üîé –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
def search_by_title_button(message):
    bot.send_message(
        message.chat.id,
        "üîé –ù–æ–º–∏ —Ñ–∏–ª–º—Ä–æ –Ω–∞–≤–∏—Å–µ–¥:",
        reply_markup=types.ForceReply()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞—Ä–æ–∏ —Ç—É–≥–º–∞–∏ "–ò–¥–æ—Ä–∞–∏ –∫–∞–Ω–∞–ª“≥–æ"
@bot.message_handler(func=lambda message: message.text == "üì¢ –ò–¥–æ—Ä–∞–∏ –∫–∞–Ω–∞–ª“≥–æ")
def manage_channels_button(message):
    if message.from_user.id == ADMIN_ID:
        channels = get_active_channels()
        markup = types.InlineKeyboardMarkup()
        
        markup.add(types.InlineKeyboardButton("‚ûï –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ –∫–∞–Ω–∞–ª", callback_data="add_channel"))
        
        if channels:
            markup.add(types.InlineKeyboardButton("üìã –†”Ø–π—Ö–∞—Ç–∏ –∫–∞–Ω–∞–ª“≥–æ", callback_data="list_channels"))
            markup.add(types.InlineKeyboardButton("üóë –•–æ—Ä–∏“∑–∏ –∫–∞–Ω–∞–ª", callback_data="remove_channel"))
        
        text = "üì¢ –ò–¥–æ—Ä–∞–∏ –∫–∞–Ω–∞–ª“≥–æ:\n\n"
        if channels:
            text += f"–ö–∞–Ω–∞–ª“≥–æ–∏ “∑–æ—Ä”£ ({len(channels)}):\n"
            for channel_id, channel_name in channels:
                text += f"‚Ä¢ {channel_name} ({channel_id})\n"
        else:
            text += "“≤–µ“∑ –∫–∞–Ω–∞–ª –∏–ª–æ–≤–∞ –Ω–∞—à—É–¥–∞–∞—Å—Ç."
        
        bot.send_message(message.chat.id, text, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "‚ùå –®—É–º–æ –∞–¥–º–∏–Ω –Ω–µ—Å—Ç–µ–¥.")
@bot.message_handler(func=lambda message: message.text == "‚ûï –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º")
def add_movie_button(message):
    if message.from_user.id == ADMIN_ID:
        bot.send_message(
            message.chat.id,
            "üìπ –§–∏–ª–º–∏ —Ö—É–¥—Ä–æ –±–∞ –º–∞–Ω —Ñ–∏—Ä–∏—Å—Ç–µ–¥ (–≤–∏–¥–µ–æ—Ñ–∞–π–ª).\n\n"
            "–ë–∞—ä–¥–∞–Ω –º–∞–Ω –∞–∑ —à—É–º–æ –Ω–æ–º–∏ —Ñ–∏–ª–º –≤–∞ —Ç–∞–≤—Å–∏—Ñ—Ä–æ –º–µ–ø—É—Ä—Å–∞–º."
        )
        bot.register_next_step_handler(message, process_movie_file)
    else:
        bot.send_message(message.chat.id, "‚ùå –®—É–º–æ –∞–¥–º–∏–Ω –Ω–µ—Å—Ç–µ–¥.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞—Ä–æ–∏ —Ç—É–≥–º–∞–∏ "–†”Ø–π—Ö–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ"
@bot.message_handler(func=lambda message: message.text == "üìã –†”Ø–π—Ö–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ")
def list_movies_button(message):
    if message.from_user.id == ADMIN_ID:
        movies = get_all_movies()
        if movies:
            text = "üìã –†”Ø–π—Ö–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ:\n\n"
            for movie in movies:
                text += f"üé¨ {movie[3]} (ID: {movie[1]})\n"
                text += f"üîó {movie[5]}\n\n"
            
            bot.send_message(message.chat.id, text)
        else:
            bot.send_message(message.chat.id, "üìã “≤–∞–Ω”Ø–∑ —Ñ–∏–ª–º–µ –∏–ª–æ–≤–∞ –Ω–∞—à—É–¥–∞–∞—Å—Ç.")
    else:
        bot.send_message(message.chat.id, "‚ùå –®—É–º–æ –∞–¥–º–∏–Ω –Ω–µ—Å—Ç–µ–¥.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞—Ä–æ–∏ —Ç—É–≥–º–∞–∏ "–ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º"
@bot.message_handler(func=lambda message: message.text == "üóë –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º")
def delete_movie_button(message):
    if message.from_user.id == ADMIN_ID:
        movies = get_all_movies()
        if movies:
            markup = types.InlineKeyboardMarkup()
            for movie in movies:
                markup.add(
                    types.InlineKeyboardButton(
                        f"üóë {movie[3]}", 
                        callback_data=f"del_{movie[1]}"
                    )
                )
            
            bot.send_message(
                message.chat.id,
                "üóë –ö–∞–¥–æ–º —Ñ–∏–ª–º—Ä–æ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω –º–µ—Ö–æ“≥–µ–¥?",
                reply_markup=markup
            )
        else:
            bot.send_message(message.chat.id, "üìã –§–∏–ª–º–µ –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω –Ω–µ—Å—Ç.")
    else:
        bot.send_message(message.chat.id, "‚ùå –®—É–º–æ –∞–¥–º–∏–Ω –Ω–µ—Å—Ç–µ–¥.")

# –ö–æ–º–∞–Ω–¥–∞ –±–∞—Ä–æ–∏ –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ —Ä–∞–≤–∞–Ω–¥
@bot.message_handler(commands=['cancel'])
def cancel_command(message):
    bot.send_message(
        message.chat.id,
        "‚ùå “≤–∞–º–∞ —Ä–∞–≤–∞–Ω–¥“≥–æ –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥–∞–Ω–¥.",
        reply_markup=get_main_keyboard(message.from_user.id)
    )
# –•–∞—Ç–æ–≥–∏“≥–æ
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    # –°–∞–Ω“∑–∏—à –±–∞—Ä–æ–∏ ID-–∏ —Ñ–∏–ª–º
    if message.reply_to_message and message.reply_to_message.text == "üîç ID-–∏ —Ñ–∏–ª–º—Ä–æ –Ω–∞–≤–∏—Å–µ–¥:":
        movie_id = message.text
        user_id = message.from_user.id
        
        if check_all_subscriptions(user_id):
            movie = get_movie(movie_id)
            if movie:
                try:
                    bot.send_video(
                        message.chat.id,
                        movie[2],  # file_id
                        caption=f"üé¨ {movie[3]}\n\n{movie[4]}"
                    )
                except:
                    bot.send_message(
                        message.chat.id,
                        "‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ñ–∏–ª–º."
                    )
            else:
                bot.send_message(message.chat.id, "‚ùå –§–∏–ª–º –±–æ –∏–Ω ID —ë—Ñ—Ç –Ω–∞—à—É–¥.")
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –ë–∞—Ä–æ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –±–æ—Ç –∞–≤–≤–∞–ª –±–∞ “≥–∞–º–∞–∏ –∫–∞–Ω–∞–ª“≥–æ –æ–±—É–Ω–∞ —à–∞–≤–µ–¥!"
            )
            show_subscription_requirement(message, movie_id)
        return
    
    # –°–∞–Ω“∑–∏—à –±–∞—Ä–æ–∏ –Ω–æ–º–∏ —Ñ–∏–ª–º
    if message.reply_to_message and message.reply_to_message.text == "üîé –ù–æ–º–∏ —Ñ–∏–ª–º—Ä–æ –Ω–∞–≤–∏—Å–µ–¥:":
        title = message.text
        user_id = message.from_user.id
        
        if check_all_subscriptions(user_id):
            movies = search_movies_by_title(title)
            if movies:
                if len(movies) == 1:
                    # –Ø–∫ —Ñ–∏–ª–º —ë—Ñ—Ç —à—É–¥
                    movie = movies[0]
                    try:
                        bot.send_video(
                            message.chat.id,
                            movie[2],  # file_id
                            caption=f"üé¨ {movie[3]}\n\n{movie[4]}"
                        )
                    except:
                        bot.send_message(message.chat.id, "‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ñ–∏–ª–º.")
                else:
                    # –Ø–∫—á–∞–Ω–¥ —Ñ–∏–ª–º —ë—Ñ—Ç —à—É–¥
                    markup = types.InlineKeyboardMarkup()
                    text = f"üîé {len(movies)} —Ç–∞ —Ñ–∏–ª–º —ë—Ñ—Ç —à—É–¥:\n\n"
                    
                    for movie in movies:
                        text += f"üé¨ {movie[3]} (ID: {movie[1]})\n"
                        markup.add(
                            types.InlineKeyboardButton(
                                f"üìπ {movie[3][:30]}...",
                                callback_data=f"select_{movie[1]}"
                            )
                        )
                    
                    bot.send_message(message.chat.id, text, reply_markup=markup)
            else:
                bot.send_message(message.chat.id, f"‚ùå –§–∏–ª–º –±–æ –Ω–æ–º–∏ '{title}' —ë—Ñ—Ç –Ω–∞—à—É–¥.")
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –ë–∞—Ä–æ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –±–æ—Ç –∞–≤–≤–∞–ª –±–∞ “≥–∞–º–∞–∏ –∫–∞–Ω–∞–ª“≥–æ –æ–±—É–Ω–∞ —à–∞–≤–µ–¥!"
            )
            show_subscription_requirement(message)
        return
    
    # –ê–≥–∞—Ä –º–∞—Ç–Ω ID-–∏ —Ñ–∏–ª–º –±–æ—à–∞–¥
    movie = get_movie(message.text)
    if movie:
        if check_all_subscriptions(message.from_user.id):
            try:
                bot.send_video(
                    message.chat.id,
                    movie[2],  # file_id
                    caption=f"üé¨ {movie[3]}\n\n{movie[4]}"
                )
            except:
                bot.send_message(
                    message.chat.id,
                    "‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ñ–∏–ª–º."
                )
        else:
            show_subscription_requirement(message, message.text)
    else:
        bot.send_message(
            message.chat.id,
            "ü§î –ú–∞–Ω —à—É–º–æ—Ä–æ –Ω–∞—Ñ–∞“≥–º–∏–¥–∞–º.\n\n"
            "–ë–∞—Ä–æ–∏ –∫–æ—Ä –±–æ –±–æ—Ç:\n"
            "‚Ä¢ –ê–∑ —Å–∏–ª–∫–∞–∏ –º–∞—Ö—Å—É—Å –∏—Å—Ç–∏—Ñ–æ–¥–∞ –∫—É–Ω–µ–¥\n"
            "‚Ä¢ –¢—É–≥–º–∞–∏ '–ü–æ–∏—Å–∫ –ø–æ ID' —ë '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é' -—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –∫—É–Ω–µ–¥\n"
            "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /start -—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –∫—É–Ω–µ–¥"
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith('select_'))
def select_movie_callback(call):
    movie_id = call.data.replace('select_', '')
    movie = get_movie(movie_id)
    
    if movie:
        try:
            bot.send_video(
                call.message.chat.id,
                movie[2],  # file_id
                caption=f"üé¨ {movie[3]}\n\n{movie[4]}"
            )
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            bot.send_message(call.message.chat.id, "‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ñ–∏–ª–º.")
    else:
        bot.answer_callback_query(call.id, "‚ùå –§–∏–ª–º —ë—Ñ—Ç –Ω–∞—à—É–¥!")

if __name__ == '__main__':
    print("ü§ñ –ë–æ—Ç –æ“ì–æ–∑ —ë—Ñ—Ç...")
    init_database()
    
    try:
        bot.polling(none_stop=True, interval=0, timeout=20)
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ–≥”£: {e}")
        print("‚ùå –•–∞—Ç–æ–≥”£ –¥–∞—Ä –∫–æ—Ä–∏ –±–æ—Ç!")